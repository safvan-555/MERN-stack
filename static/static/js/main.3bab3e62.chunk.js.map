{"version":3,"sources":["views/components/FormInput.js","views/components/Widget.js","views/components/Button.js","actions/user.js","views/Pages/SignUp.js","views/Pages/SignIn.js","views/Pages/ForgotPassword.js","views/Pages/ResetPassword.js","views/Dashboard/Employees.js","App.js","reducers/index.js","storeConfig/configureStore.js","reducers/employes.js","serviceWorker.js","index.js"],"names":["FormInput","name","type","placeholder","onChange","className","value","error","label","children","Fragment","htmlFor","id","class","style","border","defaultProps","Widget","Button","props","btnClass","classNames","btnType","onClick","setAuthToken","token","axios","defaults","headers","common","setEmployData","payload","SignUp","dispatch","useDispatch","firstname","useSelector","state","employes","lastname","email","phone","password","confirm_password","handleChange","event","target","top","aria-required","required","userData","isEmail","length","toast","warn","equals","firs_tname","last_name","post","then","data","error_description","success","setTimeout","window","location","href","catch","err","marginTop","SignIn","accessToken","localStorage","setItem","textAlign","ForgotPassword","ResetPassword","history","useHistory","load","useEffect","LoadContent","url_string","URL","searchParams","get","push","resetcode","new_password","verify_code","Employees","createTheme","text","primary","secondary","background","context","divider","default","removeItem","display","position","left","right","cursor","margin","maxWidth","width","padding","noHeader","columns","selector","sortable","firstName","lastName","theme","connect","store","setData","val","isLoggedIn","jwtToken","decoded","jwt_decode","currentTime","Date","getTime","expiry","iat","auth","pathname","exact","path","component","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","combineReducers","middleware","action","process","applyMiddleware","promise","thunk","createLogger","createStore","reducer","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.3bab3e62.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst FormInput = ({\r\n    name,\r\n    type,\r\n    placeholder,\r\n    onChange,\r\n    className,\r\n    value,\r\n    error,\r\n    children,\r\n    label,\r\n    ...props\r\n}) => {\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <label htmlFor={name}>{label}</label>\r\n            <input\r\n                id={name}\r\n                name={name}\r\n                type={type}\r\n                placeholder={placeholder}\r\n                onChange={onChange}\r\n                value={value}\r\n                className={className}\r\n                class=\"form-control\"\r\n                style={error && { border: 'solid 1px red' }}\r\n            />\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nFormInput.defaultProps = {\r\n    type: \"text\",\r\n    className: \"\"\r\n}\r\n\r\nexport default FormInput;\r\n\r\n","\r\nimport React from 'react';\r\nimport './index.css'\r\nconst Widget = ({ children, style }) => (\r\n    <div style={style} className='Wideget'>\r\n        {children}\r\n    </div>\r\n);\r\nexport default Widget;","import React from 'react';\r\n\r\nimport classNames from 'classnames'\r\n\r\nfunction Button(props) {\r\n    const btnClass = classNames('Button', props.btnType, 'marg')\r\n    return <button\r\n        className={btnClass}\r\n        onClick={props.onClick}\r\n    >\r\n        {props.label}\r\n    </button>\r\n}\r\nexport default Button;","import axios from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nconst SET_EMPLOY_DATA = \"SET_EMPLOY_DATA\"\r\nconst setAuthToken = token => {\r\n  if (token) {\r\n    // Apply authorization token to every request if logged in\r\n    axios.defaults.headers.common[\"Authorization\"] = token;\r\n  } else {\r\n    // Delete auth header\r\n    delete axios.defaults.headers.common[\"Authorization\"];\r\n  }\r\n}\r\n\r\nexport function setEmployData(name, value) {\r\n  return {\r\n    type: SET_EMPLOY_DATA,\r\n    payload: { [name]: value },\r\n  };\r\n}\r\nexport function registerUser(userData) {\r\n  return function (dispatch) {\r\n    return axios.post(\"/api/customers/sign-up\", userData)\r\n      .then(({ data }) => {\r\n        if (data.error) {\r\n          toast.warn(data.error_description)\r\n        } else {\r\n          toast.success(\"Registered successfully\")\r\n          setTimeout(() => {\r\n            window.location.href = '/sign-in'\r\n          }, 1000)\r\n        }\r\n      }).catch(err => {\r\n        toast.warn(err.error_description)\r\n      })\r\n  };\r\n}\r\nexport function Reset_Password(userData) {\r\n  return function (dispatch) {\r\n    return axios.post(\"/api/customers/reset-password\", userData)\r\n      .then(({ data }) => {\r\n        if (data.error) {\r\n          toast.warn(data.error_description)\r\n        } else {\r\n          toast.success(\"Password changes successfully\")\r\n\r\n        }\r\n      }).catch(err => {\r\n        toast.warn(err.error_description)\r\n      })\r\n  };\r\n}\r\n\r\nexport function SendInstruction(userData) {\r\n  return function (dispatch) {\r\n    return axios.post(\"/api/customers/send-instruction\", userData)\r\n      .then(({ data }) => {\r\n        if (data.error) {\r\n          toast.warn(data.error_description)\r\n        } else {\r\n          toast.success(\"Instruction successfully sent to your mail.\")\r\n\r\n        }\r\n      }).catch(err => {\r\n        toast.warn(err.error_description)\r\n      })\r\n  };\r\n}\r\n\r\nexport function Login(userData) {\r\n  return function (dispatch) {\r\n    return axios.post(\"/api/auth/login\", userData)\r\n      .then(({ data }) => {\r\n        if (data.error) {\r\n          toast.warn(data.error_description)\r\n        } else {\r\n          // Save to localStorage\r\n          // Set token to localStorage\r\n          const { accessToken } = data;\r\n          localStorage.setItem(\"jwtToken\", accessToken);\r\n          // Set token to Auth header\r\n          setAuthToken(accessToken);\r\n          // Set current user as authenticated\r\n          dispatch(setEmployData('redirect', '/'))\r\n          dispatch(setEmployData('auth', true));\r\n          toast.success(\"Logged\")\r\n\r\n        }\r\n      }).catch(err => {\r\n        toast.warn(err.error_description)\r\n      })\r\n  };\r\n}\r\n\r\n// Log user out\r\n\r\nexport function logoutUser(userData) {\r\n  return function (dispatch) {\r\n    // Remove token from local storage\r\n    localStorage.removeItem(\"jwtToken\");\r\n    // Remove auth header for future requests\r\n    setAuthToken(false);\r\n    // Set current user to empty object {} which will set isAuthenticated to false\r\n    dispatch({\r\n      type: SET_EMPLOY_DATA, payload: { auth: false }\r\n    });\r\n  }\r\n}\r\n","import React from \"react\"\r\nimport { useDispatch } from 'react-redux'\r\nimport { useSelector } from 'react-redux'\r\nimport isEmail from 'validator/lib/isEmail';\r\nimport equals from 'validator/lib/equals';\r\nimport { toast } from \"react-toastify\";\r\nimport FormInput from '../components/FormInput'\r\nimport Widget from '../components/Widget'\r\nimport Button from '../components/Button'\r\nimport '../components/index.css'\r\nimport { setEmployData, registerUser } from \"../../actions/user\"\r\n\r\nfunction SignUp(props) {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const firstname = useSelector(state => state.employes.firstname ? state.employes.firstname : '')\r\n    const lastname = useSelector(state => state.employes.lastname ? state.employes.lastname : '')\r\n    const email = useSelector(state => state.employes.email ? state.employes.email : '')\r\n    const phone = useSelector(state => state.employes.phone ? state.employes.phone : '')\r\n    const password = useSelector(state => state.employes.password ? state.employes.password : '')\r\n    const confirm_password = useSelector(state => state.employes.confirm_password ? state.employes.confirm_password : '')\r\n\r\n\r\n\r\n\r\n    const submit = () => {\r\n        if (!isEmail(email)) {\r\n            toast.warn(\"Please use valid email\")\r\n            return\r\n        }\r\n        if (!(firstname && lastname && password && confirm_password)) {\r\n            toast.warn(\"Please fill all fields\")\r\n            return\r\n        }\r\n        if (password.length < 8) {\r\n            toast.warn(\"Passwords should be at least 8 characters\")\r\n            return\r\n        }\r\n        if (!equals(password, confirm_password)) {\r\n            toast.warn(\"Passwords doesn't match\")\r\n            return\r\n        }\r\n        let data = {\r\n            firs_tname: firstname,\r\n            last_name: lastname,\r\n            email: email,\r\n            phone: phone,\r\n            password: password,\r\n            confirm_password: confirm_password\r\n        }\r\n        dispatch(registerUser(data));\r\n    }\r\n    const list = {\r\n        top: '7%'\r\n    }\r\n    const handleChange = (event) => {\r\n        dispatch(setEmployData(event.target.name, event.target.value));\r\n    }\r\n\r\n    return (\r\n        <Widget style={list}>\r\n            <p>CREATE ACCOUNT</p>\r\n\r\n            <FormInput id=\"firstname\" name=\"firstname\" onChange={handleChange} class=\"form-control\" type=\"text\" placeholder=\"First Name\" aria-required=\"true\" />\r\n            <FormInput id=\"lastname\" name=\"lastname\" onChange={handleChange} class=\"form-control\" type=\"text\" placeholder=\"Last Name\" aria-required=\"true\" />\r\n            <FormInput id=\"email\" name=\"email\" onChange={handleChange} class=\"form-control\" type=\"text\" placeholder=\" Enter Email\" required=\"\" aria-required=\"true\" />\r\n            <FormInput id=\"phone\" name=\"phone\" onChange={handleChange} class=\"form-control\" type=\"text\" placeholder=\" Enter Phone\" required=\"\" aria-required=\"true\" />\r\n            <FormInput id=\"password\" name=\"password\" onChange={handleChange} class=\"form-control\" type=\"password\" placeholder=\"Password\" required=\"\" aria-required=\"true\" />\r\n            <FormInput id=\"confirm_password\" onChange={handleChange} name=\"confirm_password\" class=\"form-control\" type=\"password\" placeholder=\"Confirm Password\" required=\"\" aria-required=\"true\" />\r\n\r\n            <Button onClick={submit} label='Submit'></Button>\r\n            <p style={{ marginTop: 5 }}>Don't have an account?<a href=\"./sign-in\"> Login Now</a></p>\r\n        </Widget>\r\n    )\r\n}\r\nexport default (SignUp)","import React from \"react\"\r\nimport { useDispatch } from 'react-redux'\r\nimport { useSelector } from 'react-redux'\r\nimport { toast } from \"react-toastify\";\r\nimport Widget from '../components/Widget'\r\nimport Button from '../components/Button'\r\nimport FormInput from '../components/FormInput'\r\nimport { setEmployData, Login } from \"../../actions/user\"\r\n\r\nfunction SignIn(props) {\r\n\r\n    const dispatch = useDispatch()\r\n    const password = useSelector(state => state.employes.password ? state.employes.password : '')\r\n    const phone = useSelector(state => state.employes.phone ? state.employes.phone : '')\r\n\r\n    const submit = () => {\r\n        if (!password) {\r\n            toast.warn(\"Password is required.\")\r\n            return\r\n        }\r\n        if (!phone) {\r\n            toast.warn(\"Phone is required.\")\r\n            return\r\n        }\r\n        let datas = {\r\n            password: password,\r\n            phone: phone\r\n        }\r\n        dispatch(Login(datas));\r\n\r\n    }\r\n    const handleChange = (event) => {\r\n        dispatch(setEmployData(event.target.name, event.target.value));\r\n    }\r\n    const list = {\r\n        top: '27%'\r\n    }\r\n    return (\r\n        <Widget style={list}>\r\n            <FormInput id=\"phone\" name=\"phone\" onChange={handleChange} type=\"text\" placeholder=\" Enter phone\" />\r\n            <FormInput id=\"password\" name=\"password\" onChange={handleChange} type=\"password\" placeholder=\" Enter Password\" />\r\n            <Button onClick={submit} label='Submit'></Button>\r\n            <p style={{ textAlign: \"center\", marginTop: 5 }}>Don't have an account?<a href=\"./sign-up\"> Sign Up</a><br />\r\n                <a href=\"./forgot-password\" > Forgot Your Password?</a></p>\r\n        </Widget>\r\n    )\r\n}\r\n\r\nexport default (SignIn)","import React from \"react\"\r\nimport { useDispatch } from 'react-redux'\r\nimport { useSelector } from 'react-redux'\r\nimport isEmail from 'validator/lib/isEmail';\r\nimport { toast } from \"react-toastify\";\r\nimport Widget from '../components/Widget'\r\nimport Button from '../components/Button'\r\nimport FormInput from '../components/FormInput'\r\nimport '../components/index.css'\r\nimport { setEmployData, SendInstruction } from \"../../actions/user\"\r\n\r\n\r\nfunction ForgotPassword(props) {\r\n\r\n    const dispatch = useDispatch()\r\n    const email = useSelector(state => state.employes.email ? state.employes.email : '')\r\n\r\n    const submit = () => {\r\n        if (!isEmail(email)) {\r\n            toast.warn(\"Please use valid email\")\r\n            return\r\n        }\r\n        let data = {\r\n            email: email,\r\n        }\r\n        dispatch(SendInstruction(data));\r\n    }\r\n    const list = {\r\n        top: '22%'\r\n    }\r\n\r\n    const handleChange = (event) => {\r\n        dispatch(setEmployData(event.target.name, event.target.value));\r\n    }\r\n    return (\r\n        <Widget style={list}>\r\n            <p>Reset Password</p>\r\n            <p>Enter the email associated with your account and we'll send an email with instruction to reset you password.</p>\r\n            <FormInput id=\"email\" onChange={handleChange} name=\"email\" class=\"form-control\" type=\"text\" placeholder=\" Enter Email\" required=\"\" aria-required=\"true\" />\r\n\r\n            <Button onClick={submit} label='Send Instructions'></Button>\r\n            <p style={{ marginTop: 5 }}>Don't have an account?<a href=\"./sign-in\"> Login Now</a></p>\r\n        </Widget>\r\n    )\r\n}\r\n\r\n\r\nexport default (ForgotPassword)","import React, { useEffect } from \"react\"\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useDispatch } from 'react-redux'\r\nimport { useSelector } from 'react-redux'\r\nimport { toast } from \"react-toastify\";\r\nimport Widget from '../components/Widget'\r\nimport Button from '../components/Button'\r\nimport FormInput from '../components/FormInput'\r\nimport '../components/index.css'\r\nimport { setEmployData, Reset_Password } from \"../../actions/user\"\r\n\r\nfunction ResetPassword(props) {\r\n\r\n    const history = useHistory();\r\n    const dispatch = useDispatch()\r\n    const password = useSelector(state => state.employes.password ? state.employes.password : '')\r\n    const confirm_password = useSelector(state => state.employes.confirm_password ? state.employes.confirm_password : '')\r\n    const load = useSelector(state => state.employes.load ? state.employes.load : true)\r\n\r\n    useEffect(() => {\r\n        LoadContent()\r\n    })\r\n    const LoadContent = () => {\r\n        if (load) {\r\n            var url_string = window.location.href\r\n            var url = new URL(url_string);\r\n            var resetcode = url.searchParams.get(\"verify\");\r\n            if (!resetcode) {\r\n                history.push('/forgot-password')\r\n            }\r\n        }\r\n    }\r\n    const submit = () => {\r\n        var url_string = window.location.href\r\n        var url = new URL(url_string);\r\n        var resetcode = url.searchParams.get(\"verify\");\r\n        if (!password) {\r\n            toast.warn(\"Password is required.\")\r\n            return\r\n        }\r\n        if (!confirm_password) {\r\n            toast.warn(\"Confirm Password is required.\")\r\n            return\r\n        }\r\n        if (!resetcode) {\r\n            toast.warn(\"use valid link or link expires\")\r\n            return\r\n        }\r\n        let data = {\r\n            new_password: password,\r\n            confirm_password: confirm_password,\r\n            verify_code: resetcode\r\n        }\r\n        dispatch(Reset_Password(data));\r\n    }\r\n    const handleChange = (event) => {\r\n        dispatch(setEmployData(event.target.name, event.target.value));\r\n    }\r\n\r\n    const list = {\r\n        top: '21%'\r\n    }\r\n    return (\r\n        <Widget style={list}>\r\n            <p>Creat new Password</p>\r\n            <p>Your new password must be diffrent from previous used password.</p>\r\n            <FormInput onChange={handleChange} id=\"password\" name=\"password\" class=\"form-control\" type=\"password\" placeholder=\" Enter Password\" required=\"\" aria-required=\"true\" />\r\n            <FormInput onChange={handleChange} id=\"confirm_password\" name=\"confirm_password\" class=\"form-control\" type=\"password\" placeholder=\" Confirm Password\" required=\"\" aria-required=\"true\" />\r\n\r\n            <Button onClick={submit} label='Reset Password'></Button>\r\n            <p style={{ marginTop: 5 }}>Don't have an account?<a href=\"./sign-in\"> Login Now</a></p>\r\n        </Widget>\r\n    )\r\n}\r\n\r\nexport default (ResetPassword)","import React from \"react\"\r\nimport DataTable, { createTheme } from 'react-data-table-component';\r\n\r\nfunction Employees(props) {\r\n\r\n\r\n    const list1 = {\r\n        top: '23%',\r\n        display: 'block',\r\n        position: 'fixed',\r\n        left: 0,\r\n        right: 0,\r\n        cursor: \"pointer\",\r\n        margin: 'auto',\r\n        maxWidth: '400px',\r\n        width: '100%'\r\n    }\r\n    const list = {\r\n        top: '27%',\r\n        display: 'block',\r\n        position: 'fixed',\r\n        left: 0,\r\n        right: 0,\r\n        background: 'rgb(0, 0, 0, 0.4)',\r\n        // top: 0,\r\n        margin: 'auto',\r\n        padding: '35px',\r\n        maxWidth: '400px',\r\n        width: '100%'\r\n    }\r\n    createTheme('solarized', {\r\n        text: {\r\n            primary: '#268bd2',\r\n            secondary: '#2aa198',\r\n        },\r\n        background: 'rgb(0, 0, 0, 0.4)',\r\n\r\n        context: {\r\n            background: 'rgb(0, 0, 0, 0.4)',\r\n            text: '#FFFFFF',\r\n        },\r\n        divider: {\r\n            default: '#073642',\r\n        },\r\n    });\r\n\r\n\r\n    const columns = [\r\n        {\r\n            name: 'First Name',\r\n            selector: 'firstName',\r\n            sortable: true,\r\n        },\r\n        {\r\n            name: 'Last Name',\r\n            selector: 'lastName',\r\n            sortable: true,\r\n        }\r\n    ]\r\n    const data = [\r\n        {\r\n            firstName: 'John',\r\n            lastName: 'Wick'\r\n        },\r\n\r\n        {\r\n            firstName: 'Lionel',\r\n            lastName: 'Messi'\r\n        },\r\n        {\r\n            firstName: 'raghu',\r\n            lastName: 'ram'\r\n        },\r\n        {\r\n            firstName: 'Cristiano',\r\n            lastName: 'Ronaldo'\r\n        },\r\n        {\r\n            firstName: 'Roberto',\r\n            lastName: 'Firmino'\r\n        }\r\n\r\n    ]\r\n    const submit = () => {\r\n        localStorage.removeItem('jwtToken');\r\n        window.location.href = '/'\r\n    }\r\n    return (\r\n        <div>\r\n            <p onClick={submit} style={list1}>Logout</p>\r\n            <DataTable\r\n                style={list}\r\n                // title=\"Employes\"\r\n                noHeader={false}\r\n                columns={columns}\r\n                data={data}\r\n                theme=\"solarized\"\r\n            />\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default (Employees)","import React from 'react';\r\n// import Layout from \"./containers/Layout\"\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport jwt_decode from \"jwt-decode\";\r\nimport SignUp from \"./views/Pages/SignUp\"\r\nimport SignIn from \"./views/Pages/SignIn\"\r\nimport ForgotPassword from \"./views/Pages/ForgotPassword\"\r\nimport ResetPassword from \"./views/Pages/ResetPassword\"\r\nimport Employees from \"./views/Dashboard/Employees\"\r\nimport { connect } from \"react-redux\";\r\nimport { setEmployData } from \"./actions/user\"\r\n\r\nimport './styles/theme.scss'\r\nfunction App(props) {\r\n    let isLoggedIn = false;\r\n    if (localStorage.jwtToken) {\r\n        // Set auth token header auth\r\n        const token = localStorage.jwtToken;\r\n        // setAuthToken(token);\r\n        // Decode token and get user info and exp\r\n        const decoded = jwt_decode(token);\r\n        // Set user and isAuthenticated\r\n        // store.dispatch(setCurrentUser(decoded));\r\n        // Check for expired token\r\n        let currentTime = new Date().getTime();\r\n        let expiry = new Date(decoded.iat).getTime();\r\n        expiry += 1000 * 60 * 59//expires by an hour\r\n        if (expiry < currentTime) {\r\n            // Logout user\r\n            // store.dispatch(logoutUser());\r\n\r\n            // Redirect to login\r\n            window.location.href = \"./sign-in\";\r\n        }\r\n        if (!props.employes.auth) {\r\n            props.setData(\"auth\", true)\r\n        }\r\n        isLoggedIn = true;\r\n    } else {\r\n        // console.log(\"path\", window.location.pathname)\r\n        if (window.location.pathname === \"/\") {\r\n            window.location.href = \"./sign-in\";\r\n            return null;\r\n        }\r\n\r\n    }\r\n    if (isLoggedIn) {\r\n        if (window.location.pathname !== \"/\") {\r\n            window.location.href = \"/\";\r\n            return null;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Router>\r\n                <Switch >\r\n                    <Route exact path=\"/\" component={Employees} />\r\n                    <Route exact path=\"/sign-up\" component={SignUp} />\r\n                    <Route exact path=\"/sign-in\" component={SignIn} />\r\n                    <Route exact path=\"/forgot-password\" component={ForgotPassword} />\r\n                    <Route exact path=\"/reset-password\" component={ResetPassword} />\r\n\r\n\r\n\r\n                </Switch>\r\n            </Router>\r\n            <ToastContainer\r\n                position=\"top-center\"\r\n                autoClose={2000}\r\n                hideProgressBar\r\n                newestOnTop={false}\r\n                closeOnClick\r\n                rtl={false}\r\n                pauseOnFocusLoss={false}\r\n                draggable\r\n                pauseOnHover\r\n            />\r\n        </>\r\n    );\r\n}\r\n\r\nconst mapStoreToProps = store => ({\r\n    employes: store.employes\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    setData: (name, val) => dispatch(setEmployData(name, val))\r\n})\r\n\r\nexport default connect(mapStoreToProps, mapDispatchToProps)(App)","import { combineReducers } from \"redux\";\r\nimport employes from \"./employes\";\r\n\r\nexport default combineReducers({ employes });\r\n","import { applyMiddleware, createStore } from \"redux\";\r\n\r\nimport { createLogger } from \"redux-logger\";\r\nimport thunk from \"redux-thunk\";\r\nimport promise from \"redux-promise-middleware\";\r\n\r\nimport reducer from \"../reducers\";\r\n\r\nlet middleware;\r\n\r\nif (process.env === \"production\") {\r\n  middleware = applyMiddleware(promise, thunk);\r\n} else {\r\n  middleware = applyMiddleware(promise, createLogger(), thunk);\r\n}\r\n\r\nexport default createStore(reducer, middleware);\r\n","export default function reducer(state = {}, action) {\r\n  switch (action.type) {\r\n    case \"SET_EMPLOY_DATA\": {\r\n      return { ...state, ...action.payload };\r\n    }\r\n\r\n    default: {\r\n      return { ...state };\r\n    }\r\n  }\r\n\r\n  //\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport store from \"./storeConfig/configureStore\";\r\nimport { Provider } from \"react-redux\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}